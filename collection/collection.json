{
  "info": {
    "_postman_id": "8417989e-ad66-4a89-be24-fa2b3fdaff09",
    "name": "Loco",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "11286435",
    "_collection_link": "https://dark-shadow-972568.postman.co/workspace/Park%2B~b480d532-0f08-4fe8-ac97-c0ca2f1e2cd6/collection/11286435-8417989e-ad66-4a89-be24-fa2b3fdaff09?action=share&source=collection_link&creator=11286435"
  },
  "item": [
    {
      "name": "Healthcheck Copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.message).to.exist;",
              "    pm.expect(responseData.msg).to.exist;",
              "    pm.expect(responseData.status).to.exist;",
              "});",
              "",
              "",
              "pm.test(\"Message is a non-empty string\", function () {",
              "    const responseData = pm.response.json();",
              "",
              "    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
              "});",
              "",
              "",
              "pm.test(\"Status is a non-negative integer\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.status).to.be.a('number');",
              "  pm.expect(responseData.status).to.be.at.least(0);",
              "});",
              "",
              "",
              "pm.test(\"Response time is less than 500ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(500);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8003/healthcheck",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8003",
          "path": [
            "healthcheck"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Sum api",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8003/api/v1/transaction-service/sum/20",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8003",
          "path": [
            "api",
            "v1",
            "transaction-service",
            "sum",
            "20"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Create Update Transaction",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "  pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has required fields\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.status).to.exist.and.to.be.a('string');",
              "    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
              "    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
              "});",
              "",
              "",
              "pm.test(\"Amount is a non-negative number\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.data.amount).to.exist.and.to.be.a('number');",
              "    pm.expect(responseData.data.amount).to.be.at.least(0, \"Amount should be non-negative\");",
              "});",
              "",
              "",
              "pm.test(\"parent_id is a non-negative integer\", function () {",
              "  const responseData = pm.response.json();",
              "",
              "  pm.expect(responseData.data.parent_id).to.be.a('number');",
              "  pm.expect(responseData.data.parent_id).to.be.above(-1);",
              "});",
              "",
              "",
              "pm.test(\"The transaction_id is a non-negative integer\", function () {",
              "  const responseData = pm.response.json();",
              "  ",
              "  pm.expect(responseData.transaction_id).to.exist.and.to.be.a('number', \"transaction_id should be a number\");",
              "  pm.expect(responseData.transaction_id).to.be.at.least(0, \"transaction_id should be a non-negative integer\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{   \n    \"id\" : 14, \n    \"parent_id\": 12,\n    \"amount\": 12,\n    \"type\": \"shopping\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://0.0.0.0:8003/api/v1/transaction-service/transaction",
          "protocol": "http",
          "host": [
            "0",
            "0",
            "0",
            "0"
          ],
          "port": "8003",
          "path": [
            "api",
            "v1",
            "transaction-service",
            "transaction"
          ]
        }
      },
      "response": []
    }
  ]
}